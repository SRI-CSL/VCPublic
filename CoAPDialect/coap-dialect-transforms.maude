mod COAP-DIALECT-TRANSFORMS is
  inc COAP-DIALECT .
  inc COAP-DIALECT-ATTACKER .

op sharedDialectAttrs : -> Attrs .
eq sharedDialectAttrs =  randSize(128) used(mtU) .

vars attrs devatts ddevatts seeds : Attrs .
vars eid eid0 str : String .
var eids : Strings .
var agent : Agent .
vars aconf aconf0 daconf : AConf .
var conf dconf conf0 conf1 uconf  : Conf .
var sys : Sys .
var cbnds : CBnds .
vars caps caps1 caps0 : Caps .
vars dmsgs dmsgs0 dmsgs1 : DMsgS .

op mkIxCtrs : Strings Attrs -> Attrs .
eq  mkIxCtrs(mtS,attrs) = attrs .
eq  mkIxCtrs(eid eids,attrs) = 
      mkIxCtrs(eids,attrs ixCtr(eid,0)) .

op mkSeeds : String Strings String Attrs -> Attrs .
eq mkSeeds(eid,mtS,str,attrs)  = attrs .
ceq mkSeeds(eid,eid0 eids,str,attrs)  = 
     mkSeeds(eid,eids,str,attrs seeds)
if seeds := seedFr(eid0,str + eid + eid0) 
            seedTo(eid0,str + eid0 + eid) .
     
op DA : Agent Strings String -> Agent .
ceq DA([eid | devatts],eids,str) =
    [eid | conf([eid | devatts] net(mtDM,mtDM)) ddevatts]
if ddevatts := sharedDialectAttrs
               mkSeeds(eid,eids,str,mtA)
               mkIxCtrs(eids,mtA) .

**** apply DA to each endpoint in aconf
**** assume eids is the  set of endpoint ids
**** copy attacker agent
op DAs : Conf Strings  String AConf -> Conf .
ceq DAs([eid | devatts] conf, eid eids,str, aconf0)
  = DAs(conf,eid eids,str,aconf0 agent)
 if agent := DA([eid | devatts], eids,str)  .
**** presumably conf is the attacker if any, and other confelts
eq DAs(conf,eids,str,aconf0) = aconf0 conf [owise] .

op getIds : Sys  -> Strings .
eq getIds({conf}) = getIds(conf,mtS) .
op getIds : Conf Strings -> Strings .
----- only collect endpoint ids, not attacker
eq getIds([eid | devatts config(cbnds) ] conf, eids)
     = getIds(conf, eids eid) .
eq getIds(conf, eids) = eids [owise].

op D : Sys -> Sys .
op DX : Sys Strings -> Sys .
eq D(sys) = DX(sys,getIds(sys)) .

**** use default "xxxx" seed string prefix
ceq DX({conf net(mtDM,mtDM)},eids) =
   { dconf
     net(mtDM,mtDM)
   }
if dconf := DAs(conf,eids,"xxxx",mt) .

**** assume at most one agent with caps attribute
op addCaps : Sys Caps -> Sys .
eq addCaps({conf [eid | devatts caps(caps0)]},caps1) =
    {conf [eid | devatts caps(caps0 caps1)]} .
eq addCaps({conf},caps1) = {conf} [owise] .

**** extract unwrapped endpoints and non net confelts
op UD : Sys -> Sys .
op UDX : Conf Conf -> Conf .
eq UD({conf}) = {UDX(conf,mt)} .
eq UDX([eid | conf([eid | devatts] conf1) ddevatts] conf0,
               uconf) =
      UDX(conf0, uconf [eid | devatts] ) .
eq UDX(conf0, uconf) = uconf conf0 [owise] .

op UDC : Conf -> Conf .
eq UDC(conf) = UDX(conf,mt) .

endm

eof

 

