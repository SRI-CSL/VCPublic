fmod DECIDE is 
  inc VAL-SAFETY .

  vars id id2 id1 : Id .
  vars kb kb1 kb2 : KB .
  vars f c vnxt vmin vmax vminD vmaxD vel dis 
       vminAct uminAct vmaxAct vc dstop caution
       umaxAct time dcc spd accmin disTar 
       safer safe bad 
       ff ff1 ff2 v1 v2 vb : SymTerm .
  vars t t2 t3 i j k t4 : Nat .
  vars cond cond0 cond00
       cond1 cond2 cond3 cond4 cond5 
       cond6 cond11 
       cond21 cond31 cond41 cond51 cond61  : Boolean .
  vars l l0 l1 l2 : Loc .
  var ids : IdSet .
  vars u1 u2 : UVal .
  vars str str0 str1 str2 str3 : String .

  --- op val-safety : Id Nat KB Action Boolean -> NatSymSegments .
  *** TODO: Need to update the controller so that it is safer and not between safer and safe.
 ceq val-safety(id,i,kb,actSpeed(id,vmin,vmax),cond)
   = 
   symValSpeedRed(i + 2,"safe",vmin,vmax,vv(i),vv(i + 1),cond1)
   if (gapNext(id,dis) @ t)
      gapSafety(id,safer,safe,bad) 
      (speed(id,vel) @ t2) 
      (mode(id,following(id2)) @ t3) kb1 := kb
   /\ vnxt := getVelNext(id,kb)
   /\ cond1 := vv(i) === (dis + vnxt)/(1/1 + safer)
               and vv(i + 1) === (dis + vnxt)/(1/1 + safe)
               and cond .

op symValSpeedRed : Nat String SymTerm SymTerm
                   SymTerm SymTerm Boolean -> NatSymSegmentsSet .
  ceq symValSpeedRed(i,str,vmin,vmax,vminD,vmaxD,cond) = 
    {i + 4, [vv(i,str0),u(vv(i + 1,str1)),vv(i + 2,str2),u(vv(i + 3,str3)),cond11 and cond and vv(i) <= vv(i + 2)]}
    {i + 4, [vv(i,str0),u(vv(i + 1,str1)),vv(i + 2,str2),u(vv(i + 3,str3)),cond21 and cond and vv(i) <= vv(i + 2)]}
    {i + 4, [vv(i,str0),u(vv(i + 1,str1)),vv(i + 2,str2),u(vv(i + 3,str3)),cond31 and cond and vv(i) <= vv(i + 2)]}
    {i + 4, [vv(i,str0),u(vv(i + 1,str1)),vv(i + 2,str2),u(vv(i + 3,str3)),cond41 and cond and vv(i) <= vv(i + 2)]}
    {i + 4, [vv(i,str0),u(vv(i + 1,str1)),vv(i + 2,str2),u(vv(i + 3,str3)),cond51 and cond and vv(i) <= vv(i + 2)]}
    {i + 4, [vv(i,str0),u(vv(i + 1,str1)),vv(i + 2,str2),u(vv(i + 3,str3)),cond61 and cond and vv(i) <= vv(i + 2)]}
    if cond0 := vmin <= vmax and vminD <= vmaxD 
    /\ cond1 := vmin >= vmaxD 
    /\ str0 := "vminValSpeedRed" + str 
    /\ str1 := "uminValSpeedRed" + str
    /\ str2 := "vmaxValSpeedRed" + str
    /\ str3 := "umaxValSpeedRed" + str
    /\ cond11 := vv(i,str0) === vmin 
            and vv(i + 1,str1) === 1/1
            and vv(i + 2,str2) === ((vmin + vmax) / 2/1)
            and vv(i + 3,str3) === 0/1 
            and cond1 and cond0
    /\ cond2 := vmax <= vminD 
    /\ cond21 := vv(i,str0) === ((vmin + vmax) / 2/1) 
            and vv(i + 1,str1) === 0/1
            and vv(i + 2,str2) === vmax
            and vv(i + 3,str3) === 1/1
            and cond2 and cond0
    /\ cond3 := vmin < vminD and vmax >= vmaxD 
    /\ cond31 := vv(i,str0) === vminD 
            and vv(i + 1,str1) === 1/1
            and vv(i + 2,str2) === vmaxD
            and vv(i + 3,str3) === 1/1
            and cond3 and cond0
    /\ cond4 := vmin >= vminD and 
                vmin <= vmaxD and 
                vmax >= vmaxD 
    /\ cond41 := vv(i,str0) === vmin 
            and vv(i + 1,str1) === 1/1
            and vv(i + 2,str2) === vmaxD
            and vv(i + 3,str3) === 1/1
            and cond4 and cond0
    /\ cond5 := vmin >= vminD and vmax < vmaxD 
    /\ cond51 := vv(i,str0) === vmin 
            and vv(i + 1,str1) === 1/1
            and vv(i + 2,str2) === vmax
            and vv(i + 3,str3) === 1/1
            and cond5 and cond0 
    /\ cond6 := vmin >= vminD and 
                vmax < vmaxD 
    /\ cond61 := vv(i,str0) === vmin 
            and vv(i + 1,str1) === 1/1
            and vv(i + 2,str2) === vmax
            and vv(i + 3,str3) === 1/1
            and cond6 and cond0 .
endfm