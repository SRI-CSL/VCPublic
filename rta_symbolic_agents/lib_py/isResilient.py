import maude
from maude_z3 import SMT_CHECK
import maude_z3
import basic_lib
from timeit import default_timer as timer
from datetime import timedelta



def checkTimeDur(m,asys):
  start = timer()
  asys = str(asys)
  # print("=====> Start Time =", start)
  dt = m.parseTerm("getTickSize(" + asys + ")")
  dt.reduce()
  spset = m.parseTerm("spset")
  spset.reduce()
  sps = str(spset).split(" ")
  results = []
  for sp in sps:
    relSP = m.parseTerm(sp + " getRelSP(" + sp + ",none)")
    relSP.reduce()
    spsRel = str(relSP).split(" ")
    for sp1 in spsRel:
      print("Checking case:" + sp + " -> " + sp1)
      check = m.parseTerm("checkTimeDurSPtoSP1TimeStepsBot(" + sp + "," + sp1 + "," + str(asys) + "," + str(dt) + ")")
      check.reduce()
      results.append([sp,sp1,str(check)])
      print(check)
  end = timer()
  # print("====> End Time =", end)
  print("====> Total Time for CheckDur =", end - start)
  print(timedelta(seconds=end-start))
  return results

  # check = m.parseTerm("checkTimeDur(" + str(asys) + ")")
  # check.reduce()
  # print(check)
  # if str(check) == "(true).Bool":
  #   print("Tick tick is appropriate with respect to ODD and Safety Properties")
  # else:
  #   print("Tick tick is not appropriate with respect to ODD and Safety Properties")

def isResilient(m,mname,asys,t,safe,bad,safer):
  start = timer()
  print("=====> Start Time =", start)
  spk = m.findSort('SP').kind()
  asysk = m.findSort('ASystem').kind()
  symtermk = m.findSort('SymTerm').kind()
  modulek = m.findSort('Module').kind()
  termk = m.findSort('Term').kind()
  timek = m.findSort('Time').kind()
  boolk = m.findSort('Bool').kind()
  asysSetk = m.findSort('ASystemSet?').kind()
  asysSetkk = m.findSort('ASystemSet').kind()
  spsetk = m.findSort('SPSet').kind()
  enforceSP = m.findSymbol('enforceSP', [spk, asysk], asysk)
  getTickSize = m.findSymbol('getTickSize', [asysk],symtermk)
  afterTicksSP = m.findSymbol('afterTicksSP', [modulek, termk, timek, spk],asysSetk)
  checkReachable = m.findSymbol('checkReachable', [modulek, termk, spk],boolk)
  getImGreater = m.findSymbol('getImGreater', [spk, spsetk, spsetk],spsetk)
  checkImGrSP = m.findSymbol('checkImGrSP', [modulek, termk, spk, spsetk, symtermk],boolk)
  checkImGrSPDT = m.findSymbol('checkImGrSPDT', [modulek, termk, spk, spsetk, symtermk],asysSetkk)
  setStopTime = m.findSymbol('setStopTime', [asysk, timek],asysk)

  mname = m.parseTerm(mname)
  asys = m.parseTerm(asys)
  t = m.parseTerm(t)
  asys2 = setStopTime.makeTerm([asys,t])
  safe = m.parseTerm(safe)
  bad = m.parseTerm(bad)
  safer = m.parseTerm(safer)
  spset = m.parseTerm("spset")
  none = m.parseTerm("(none).SPSet")
  asysI = enforceSP.makeTerm([safe,asys2])
  asysI.reduce()
  # sat = m.parseTerm("isSatModel(" + str(asysI) + ")")
  # sat.reduce()
  # print(sat)
  # print(maude_z3.smt_model)
  # print(asysI)
  dt = getTickSize.makeTerm([asysI])
  dt.reduce()
  asysT = m.upTerm(asysI)
  asysT.reduce()
  afterTickRes = afterTicksSP.makeTerm([mname,asysT,t,safer])
  afterTickRes.reduce()
  # print(afterTickRes)
  if not str(afterTickRes) == "noasys":
    print("=============> System does not reach safer within " +  str(t) + " time units.")
    smtModel = maude_z3.smt_model
    # print(maude_z3.getLog(m,str(afterTickRes)))
    return(["afterTicks",afterTickRes])
    # print(maude_z3.smt_model)
  else:
    print("=============> System is always safer within" +  str(t) + " time units.")
    # checkReachableRes = checkReachable.makeTerm([mname,asysT,bad])
    # checkReachableRes.reduce()
    # print(checkReachableRes)
    # if str(checkReachableRes) == "(true).Bool":
    #   print("System reach bad within t time units.")  
    sps = getImGreater.makeTerm([bad,spset,none])
    sps.reduce()
    # print(sps)
    b2 = checkImGrSP.makeTerm([mname,asysT,bad,sps,dt])
    b2.reduce()
    # smtModel = maude_z3.smt_model
    # basic_lib.printLog(m,smtModel,str(b2))
    # unsafeb2 = m.parseTerm("checkSP(unsafeSP," + str(b2) + ")")
    # unsafeb2.reduce()
    # badb2 = m.parseTerm("checkSP(badSP," + str(b2) + ")")
    # badb2.reduce()
    # print(unsafeb2)
    # print(badb2)
    if (str(b2) == "true"):
      print("System is resilient.")
    else: 
      print("System is not resilient.")
  end = timer()
  print("====> End Time =", end)
  print("====> Total Time =", end - start)
  print(timedelta(seconds=end-start))

def isResilientDT(m,mname,asys,t,safe,bad,safer):
  start = timer()
  # print("=====> Start Time =", start)
  spk = m.findSort('SP').kind()
  asysk = m.findSort('ASystem').kind()
  symtermk = m.findSort('SymTerm').kind()
  modulek = m.findSort('Module').kind()
  termk = m.findSort('Term').kind()
  timek = m.findSort('Time').kind()
  boolk = m.findSort('Bool').kind()
  asysSetk = m.findSort('ASystemSet?').kind()
  asysSetkk = m.findSort('ASystemSet').kind()
  spsetk = m.findSort('SPSet').kind()
  enforceSP = m.findSymbol('enforceSP', [spk, asysk], asysk)
  getTickSize = m.findSymbol('getTickSize', [asysk],symtermk)
  afterTicksSP = m.findSymbol('afterTicksSP', [modulek, termk, timek, spk],asysSetk)
  checkReachable = m.findSymbol('checkReachable', [modulek, termk, spk],boolk)
  getImGreater = m.findSymbol('getImGreater', [spk, spsetk, spsetk],spsetk)
  checkImGrSP = m.findSymbol('checkImGrSP', [modulek, termk, spk, spsetk, symtermk],boolk)
  checkImGrSPDT = m.findSymbol('checkImGrSPDT', [modulek, termk, spk, spsetk, symtermk],asysSetkk)
  setStopTime = m.findSymbol('setStopTime', [asysk, timek],asysk)

  mname = m.parseTerm(mname)
  asys = m.parseTerm(asys)
  t = m.parseTerm(t)
  asys2 = setStopTime.makeTerm([asys,t])
  safe = m.parseTerm(safe)
  bad = m.parseTerm(bad)
  safer = m.parseTerm(safer)
  spset = m.parseTerm("spset")
  none = m.parseTerm("(none).SPSet")
  asysI = enforceSP.makeTerm([safe,asys2])
  asysI.reduce()
  # sat = m.parseTerm("isSatModel(" + str(asysI) + ")")
  # sat.reduce()
  # print(sat)
  # print(maude_z3.smt_model)
  # print(asysI)
  dt = getTickSize.makeTerm([asysI])
  dt.reduce()
  asysT = m.upTerm(asysI)
  asysT.reduce()
  afterTickRes = afterTicksSP.makeTerm([mname,asysT,t,safer])
  afterTickRes.reduce()
  # print(afterTickRes)
  if not str(afterTickRes) == "noasys":
    print("=============> System does not reach safer within " +  str(t) + " time units.")
    smtModel = maude_z3.smt_model
    # print(maude_z3.getLog(m,str(afterTickRes)))
    return(["afterTicks",afterTickRes,smtModel])
    # print(maude_z3.smt_model)
  else:
    print("System always reaches safer within t time units.")
    # checkReachableRes = checkReachable.makeTerm([mname,asysT,bad])
    # checkReachableRes.reduce()
    # print(checkReachableRes)
    # if str(checkReachableRes) == "(true).Bool":
    #   print("System reach bad within t time units.")  
    sps = getImGreater.makeTerm([bad,spset,none])
    sps.reduce()
    # print(sps)
    b2 = checkImGrSPDT.makeTerm([mname,asysT,bad,sps,dt])
    b2.reduce()
    # smtModel = maude_z3.smt_model
    # basic_lib.printLog(m,smtModel,str(b2))
    # unsafeb2 = m.parseTerm("checkSP(unsafeSP," + str(b2) + ")")
    # unsafeb2.reduce()
    # badb2 = m.parseTerm("checkSP(badSP," + str(b2) + ")")
    # badb2.reduce()
    # print(unsafeb2)
    # print(badb2)
    end = timer()
    # print("====> End Time =", end)
    print("====> Total Time for isResilientDT =", end - start)
    print(timedelta(seconds=end-start))
    if (str(b2) == "(none).ASystemSet"):
      print("System is resilient.")
      return([])
    else: 
      print("System is not resilient.")
      return(["checkImGrSPDT",b2])

